@page "/login"
@inject AuthenticationHttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<EditForm Model="@userLoginDTO" OnValidSubmit="@HandleValidSubmit">
    <CustomValidation @ref="customValidation" />
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <InputText class="form-control" id="Email" @bind-Value="userLoginDTO.Email" placeholder="Email" />
    </div>

    <div class="mb-3">
        <InputText class="form-control" id="Password" @bind-Value="userLoginDTO.Password" placeholder="Password" />
    </div>

    @if (!loggingIn)
    {
        <button class="btn btn-primary" type="submit">Submit</button>
    }
    else
    {
        <p>
            Logging in...
        </p>
    }

</EditForm>

@code {
    private UserLoginDTO userLoginDTO = new();
    private CustomValidation? customValidation;
    private bool loggingIn;

    private async Task HandleValidSubmit()
    {
        loggingIn = true;

        var result = await Http.LoginUser(userLoginDTO);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("dashboard");
        }
        else
        {
            customValidation?.ClearErrors();
            var errors = new Dictionary<string, List<string>>();
            errors.Add("", new List<string> { result.Message });
            customValidation?.DisplayErrors(errors);
        }

        loggingIn = false;
    }
}